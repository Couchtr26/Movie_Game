🎬 Movie Game Backend (FastAPI + SQLite)
This project is a simulation engine and backend API for managing a fictional movie production game. It is built using FastAPI and SQLite, demonstrating database relationships, random data generation, and RESTful interaction.

🛠️ Tech Stack
Backend Framework: FastAPI — modern, high-performance Python web framework for building APIs

Database: SQLite — lightweight relational database for easy setup and prototyping

ORM: (If you’re using one, e.g., SQLAlchemy or Tortoise ORM)

Python Version: 3.9+ (or whichever version you’re using)

API Documentation: OpenAPI/Swagger (auto-generated by FastAPI)

Deployment: Uvicorn ASGI server for running the FastAPI app

Testing: (If applicable, e.g., pytest)

Other Tools: (Any other libraries/tools, e.g., Faker for random data, Alembic for migrations)



📽️ Demo Video
https://youtu.be/nf5_B6xl-Bc
This video showcases core features including:

Random movie generation

Actor and producer queries

Live database interaction via FastAPI

💾 Features
SQLite database with related tables: Movies, Actors, Producers, Genres, Scandals, plus many-to-many join tables Movie_Cast and Movie_Scandal

Random movie generator creating and populating complete movie records

Assigns scandals and casting randomly for added simulation depth

FastAPI RESTful endpoints for:

Creating a new random movie

Viewing movie details

Searching actors, producers, and movies

Robust error handling for missing or invalid data and DB issues

🧱 Database Schema Overview
Movies — Movie details including title, genre, budget, etc.

Actors — Actor profiles

Producers — Producer profiles

Genres — Movie genres

Scandals — Scandal events that can affect movies

Movie_Cast — Many-to-many relation linking movies to actors

Movie_Scandal — Many-to-many relation linking movies to scandals

Note: Schema design is still evolving; working on refining relationships and constraints.

🚀 Running the Server
Install dependencies:

bash
Copy
Edit
pip install fastapi uvicorn
Start the server:

bash
Copy
Edit
uvicorn main:app --reload
Open API docs at:

arduino
Copy
Edit
http://127.0.0.1:8000/docs
🔧 Work in Progress
/movies/{id}/full endpoint currently under repair

Enhancements planned for genre and budget logic

UI integration and frontend work upcoming

Further schema refinements needed for stability and extensibility

🙋 About
This is a solo-built backend project showcasing experience with API development, relational database modeling, and procedural content generation in Python.


📄 License
MIT License — free to use, modify, and distribute.



© 2025 Thomas Couch — Grey Knight Software
